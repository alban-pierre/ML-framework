classifiers = [

    ("Nearest Neighbors", KNeighborsClassifier(3)),
    ("Linear SVM", SVC(kernel="linear", C=0.025)),
    ("Sigmoid SVM", SVC(kernel="sigmoid", C=0.025)),
    ("rbf SVM", SVC(kernel="rbf", C=0.025)),
    ("SVM Linear", SVC(kernel=Linear(), C=0.025)),
    ("SVM Polynomial", SVC(kernel=Polynomial(), C=0.025)),
    ("SVM RBF", SVC(kernel=RBF(), C=0.025)),
    ("SVM Cossim", SVC(kernel=Cossim(), C=0.025)),
    ("SVM Exponential", SVC(kernel=Exponential(), C=0.025)),
    ("SVM Laplacian", SVC(kernel=Laplacian(), C=0.025)),
    ("SVM RationalQuadratic", SVC(kernel=RationalQuadratic(), C=0.025)),
    ("SVM InverseMultiquadratic", SVC(kernel=InverseMultiquadratic(), C=0.025)),
    ("SVM Cauchy", SVC(kernel=Cauchy(), C=0.025)),
    ("SVM TStudent", SVC(kernel=TStudent(), C=0.025)),
    ("SVM ANOVA", SVC(kernel=ANOVA(), C=0.025)),
    ("SVM Wavelet", SVC(kernel=Wavelet(), C=0.025)),
    ("SVM Fourier", SVC(kernel=Fourier(), C=0.025)),
    ("SVM Tanimoto", SVC(kernel=Tanimoto(), C=0.025)),
    ("SVM Sorensen", SVC(kernel=Sorensen(), C=0.025)),
    ("SVM AdditiveChi2", SVC(kernel=AdditiveChi2(), C=0.025)),
    ("SVM Chi2", SVC(kernel=Chi2(), C=0.025)),
    ("SVM Min", SVC(kernel=Min(), C=0.025)),
    ("SVM GeneralizedHistogramIntersection", SVC(kernel=GeneralizedHistogramIntersection(), C=0.025)),
    ("SVM MinMax", SVC(kernel=MinMax(), C=0.025)),
    ("SVM Spline", SVC(kernel=Spline(), C=0.025)),
    ("SVM Log", SVC(kernel=Log(), C=0.025)),
    ("SVM Power", SVC(kernel=Power(), C=0.025)),
    ("RBF SVM", SVC(gamma=2, C=1)),
    ("Gaussian Process", GaussianProcessClassifier(1.0 * RBF(1.0))),
    ("Decision Tree", DecisionTreeClassifier(max_depth=5)),
    ("Random Forest", RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)),
    ("Neural Net", MLPClassifier(alpha=1)),
    ("AdaBoost", AdaBoostClassifier()),
    ("Naive Bayes", GaussianNB()),
    ("QDA", QuadraticDiscriminantAnalysis()),
    ("Logistic Regression", LogisticRegression()),
    ("Logistic Regression newton", LogisticRegression(solver="newton-cg")),
    ("Logistic Regression mbfgs", LogisticRegression(solver="lbfgs")),
    ("Logistic Regression liblinear", LogisticRegression(solver="liblinear", penalty="l1")),
    ("Logistic Regression sag", LogisticRegression(solver="sag")),
    ("Logistic Regression saga", LogisticRegression(solver="saga", penalty="l1")),
    ("Logistic Regression CV", LogisticRegressionCV())

]
